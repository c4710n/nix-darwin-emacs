#+TITLE: nix-darwin-emacs

#+begin_quote
A nix overlay for bleeding edge Emacs on Darwin (the heart of macOS).
#+end_quote

* About this overlay
** bleeding edge Emacs
This overlay provides a package =emacsGit= which is:
+ built from the latest =master= branch.
+ patched with [[https://github.com/d12frosted/homebrew-emacs-plus/tree/master/patches][patches from homebrew-emacs-plus]].
+ embellished by [[./overlays/icons/memeplex-wide.png][icon provided by memplex]] ([[https://github.com/d12frosted/homebrew-emacs-plus/issues/419#issuecomment-966735773][original post]]).
+ linked to all the =pkgs.tree-sitter-grammars.tree-sitter-*= packages. (even though Emacs doesn't yet support all the corresponding ~-ts-mode~)

#+begin_quote
And, this is the only package provided by this overlay.
#+end_quote

** other Emacs packages
This overlay doesn't provide any other Emacs packages, such as:
+ =melpaStablePackages.*=
+ =melpaPackages.*=
+ =elpaPackages.*=
+ ...

If you need them, try to use overlay ~package~ provided by [[https://github.com/nix-community/emacs-overlay][nix-community/emacs-overlay]].

* Quick Start
First, build it:
#+begin_src sh
$ nix build .#
#+end_src

Then, explore the directory =result=:
#+begin_src sh
$ ls ./result
#+end_src

* An example using Flake
#+begin_src nix
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-22.11-darwin";

    darwin = {
      url = "github:lnl7/nix-darwin/master";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    darwin-emacs = {
      url = "github:c4710n/nix-darwin-emacs";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    darwin-emacs-packages = {
      url = "github:nix-community/emacs-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs =
    { self
    , nixpkgs
    , darwin
    , darwin-emacs
    , darwin-emacs-packages
    }: {
      darwinConfigurations = {
        "current" = darwin.lib.darwinSystem rec {
          system = "aarch64-darwin"; # or "x86_64-darwin"

          modules = [
            {
              nixpkgs = {
                overlays = [
                  # 1. use `emacs` overlay provided by this repo
                  darwin-emacs.overlays.emacs
                  # 2. use `package` overlay provided by nix-community/emacs-overlay
                  darwin-emacs-packages.overlays.package
                ];
              };
            }
          ];
        };
      };
    };
}
#+end_src

* Extra library functionality
This overlay comes with extra functions to generate an Emacs closure from various types of dependency declaration. (These are abstractions on top of =emacsWithPackages=.)

For example, =emacsWithPackagesFromUsePackage= adds packages which are required in a user's config via =use-package=.

#+begin_src nix
{
  environment.systemPackages = [
    (emacsWithPackagesFromUsePackage {
      # Emacs config file.
      #
      # Supported formats:
      # + elisp source code - `*.el`
      # + org-mode babel files - `*.org`
      #
      # Note:
      # Config files cannot contain unicode characters, since they're being parsed in nix,
      # which lacks unicode support.
      #
      # elisp source code
      config = ./emacs.el;

      # or, org-mode babel files
      # config = ./emacs.org;

      # Whether to include your config as a default init file.
      # If being bool, the value of config is used.
      # Its value can also be a derivation like this if you want to do some
      # substitution:
      #   defaultInitFile = pkgs.substituteAll {
      #     name = "default.el";
      #     src = ./emacs.el;
      #     inherit (config.xdg) configHome dataHome;
      #   };
      defaultInitFile = true;

      # Package is optional, defaults to pkgs.emacsGit
      package = pkgs.emacsGit;

      # By default emacsWithPackagesFromUsePackage will only pull in
      # packages with `:ensure`, `:ensure t` or `:ensure <package name>`.

      # For Org mode babel files, by default only code blocks with
      # `:tangle yes` are considered. Setting `alwaysTangle` to `true`
      # will include all code blocks missing the `:tangle` argument,
      # defaulting it to `yes`.
      # Note that this is NOT recommended unless you have something like
      # `#+PROPERTY: header-args:emacs-lisp :tangle yes` in your config,
      # which defaults `:tangle` to `yes`.
      alwaysTangle = true;

      # Optionally provide extra packages not in the configuration file.
      extraEmacsPackages = epkgs: [
        epkgs.cask
      ];

      # Optionally override derivations.
      override = epkgs: epkgs // {
        weechat = epkgs.melpaPackages.weechat.overrideAttrs(old: {
          patches = [ ./weechat-el.patch ];
        });
      };
    })
  ];
}
#+END_SRC

Similarly, =emacsWithPackagesFromPackageRequires= adds packages which
are declared in a =.el= package file's =Package-Requires= header, which
can be handy for CI purposes:

#+BEGIN_SRC nix
# ...
let
  emacsForCI = pkgs.emacsWithPackagesFromPackageRequires {
    packageElisp = builtins.readFile ./flycheck.el;
    extraEmacsPackages = epkgs: [
      epkgs.package-lint
    ];
  };
pkgs.mkShell {
  buildInputs = [ emacsForCI ];
}
#+end_src

* License
MIT
